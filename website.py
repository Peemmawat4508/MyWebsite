import streamlit as st
import openai
import requests
from PIL import Image
from io import BytesIO
import os

# ตั้งค่าหน้าเพจ
st.set_page_config(page_title="AI Chat & Image Gen", layout="wide")

# ตั้งค่า API key
api_key = st.secrets["OPENAI_API_KEY"] if "OPENAI_API_KEY" in st.secrets else st.text_input("Enter OpenAI API Key", type="password")

if api_key:
    os.environ["OPENAI_API_KEY"] = api_key
    client = openai.OpenAI()

    # Define tabs within the if block
    tab1, tab2 = st.tabs([" AI Chat Assistant", " DALL-E Image Generator"])

    with tab1:
        st.title(" AI Chat Assistant")
        if "messages" not in st.session_state:
            st.session_state.messages = []

        with st.sidebar:
            st.header("Chat Settings")
            chat_models = ["gpt-3.5-turbo", "gpt-4", "gpt-4-0613"]
            model = st.multiselect("Select Model", chat_models, default=["gpt-3.5-turbo"])
            temperature = st.slider("Creativity (Temperature)", min_value=0.0, max_value=2.0, value=0.7, step=0.1)
            if st.button("Clear Chat History"):
                st.session_state.messages = []

        for message in st.session_state.messages:
            role = message["role"]
            content = message["content"]
            if role == "user":
                st.markdown(f'<div class="user-message"> You: {content}</div>', unsafe_allow_html=True)
            else:
                st.markdown(f'<div class="assistant-message"> AI: {content}</div>', unsafe_allow_html=True)

        user_input = st.text_area("Type your message:", height=100)
        if st.button("Send Message", type="primary", disabled=not user_input or not model): # ตรวจสอบ model
            st.session_state.messages.append({"role": "user", "content": user_input})
            try:
                with st.spinner("AI is thinking..."):
                    responses = []
                    for mdl in model:
                        response = client.chat.completions.create(
                            model=mdl,
                            messages=[{"role": m["role"], "content": m["content"]} for m in st.session_state.messages],
                            temperature=temperature,
                        )
                        responses.append(f"**{mdl}**: {response.choices[0].message.content}")

                    assistant_response = "\n\n".join(responses)
                    st.session_state.messages.append({"role": "assistant", "content": assistant_response})
                    st.rerun()
            except openai.APIError as e: # จับ error เฉพาะของ OpenAI
                st.error(f"OpenAI API Error: {str(e)}")
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")

    with tab2:
        st.title(" DALL-E Image Generator")

        col1, col2, col3 = st.columns(3)

        with col1:
            image_models = ["dall-e-2", "dall-e-3"]
            model = st.multiselect("Select Model", options=image_models, default=["dall-e-3"])

        with col2:
            size = st.selectbox("Image Size", options=["256x256", "512x512", "1024x1024"], index=2)

        with col3:
            quality = st.selectbox("Quality", options=["standard", "hd"], index=0)

        prompt = st.text_area("Image Description", height=100)

        if st.button("Generate Image", type="primary", disabled=not prompt or not model): # ตรวจสอบ model
            try:
                with st.spinner("Generating image..."):
                    for mdl in model:
                        response = client.images.generate(
                            prompt=prompt,
                            n=1,
                            size=size,
                            model=mdl,
                            quality=quality
                        )
                        image_url = response.data[0].url
                        st.image(image_url, caption=f"Generated by {mdl}", use_column_width=True)

                        response_image = requests.get(image_url)
                        img = Image.open(BytesIO(response_image.content))
                        buf = BytesIO()
                        img.save(buf, format="PNG")
                        st.download_button(
                            label=f"⬇️ Download Image ({mdl})",
                            data=buf.getvalue(),
                            file_name=f"generated_image_{mdl}.png",
                            mime="image/png"
                        )
            except openai.APIError as e: # จับ error เฉพาะของ OpenAI
                st.error(f"OpenAI API Error: {str(e)}")
            except Exception as e:
                st.error(f"An error occurred: {str(e)}")
else:
    st.warning("Please enter your OpenAI API Key to start using the app.")